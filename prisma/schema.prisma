// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  image         String?
  discription   String?
  accounts      Account[]
  sessions      Session[]
  tweets        Tweet[]
  likes         Like[]
  follower      Follows[] @relation("following")
  following     Follows[] @relation("follower")
  createdAt     DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime  @updatedAt
}

model Follows {
  id          String @id @default(cuid())
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tweet {
  id            String   @id @default(cuid())
  content       String?
  media         String?
  createdAt     DateTime @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime @updatedAt
  autherId      String
  auther        User     @relation(fields: [autherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentTweetId String?
  parentTweet   Tweet?   @relation("TweetToReply", fields: [parentTweetId], references: [id], onDelete: Cascade)
  replies       Tweet[]  @relation("TweetToReply")
  isReply       Boolean  @default(false)
  likes         Like[]
}

model Like {
  LikedByUserId String
  tweetId       String
  LikedByUser   User     @relation(fields: [LikedByUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tweet         Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime @default(now()) @db.Timestamptz(3)

  @@id([LikedByUserId, tweetId])
  @@unique([LikedByUserId, tweetId], name: "LikeUniqueId")
  @@index([LikedByUserId])
  @@index([tweetId])
}
